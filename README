# Start the Nodes with "start.sh"
# The first arg is the nodecount, candidatecount, party buddies, friendcount, responsecount
# The fourth argument must be "y" if the execution of nodes should start right after generating the graph

# The lines:
#dot -Tpng $GRAPHFILE > $GRAPHPNG
#feh -. $GRAPHPNG &
# Depending on your input settings, the generation of a png file can take up a long time

# All ID, ip and port informations are in the file doc/address_all.txt
# If you want more than 5000 nodes, you have to expand the list

# To controll the nodes, use the bin/controller programm
# First argument should be the port to which a signal should be send
# Afterwards you are asked if the watcher should be started
# Do NOT use the port 25000 as it is used for the watcher
# The watcher gathers all messages from the nodes 
# and writes them into doc/results.txt

# To Evaulate the election, the sumCandidates.sh script counts all node clvls
# and sums them for each candidate.
# It then prints the results to std out.

# To Evaluate the resulsts file in detail use grep commands with the signal ids found in include/constants.h

# To get more than 128 connections you have to modify your system.
# Typically the backlog parameter on the listen(2) systemcall is set
# by your system. Standard Linux uses a max of 128
sysctl -a | grep somaxconn
# If the nodes are started and spreading the rumor, they are bursting
# the watcher with messages depending on the nodecount.
# To increase the number of backlog connections
sysctl -w net.core.somaxconn=N
# where N is your wished backlog queue.

# Example
# The default termination vtime is 1000, change it in include/constants.h and recompile
# creates and starts the network then sleeps 1 sec to wait buildup and continues with the init signal
./start 50 2 5 10 25 y && sleep 1 && ./bin/controller 25001 11 1

# if you want inbetween results start the watcher with a vector time at which the nodes should respond
./bin/watcher 500

# send the init signal to both candidates
# the second parameter on each starts the logger if zero
# the network will start after this
./bin/controller 25001 10 1 && ./bin/controller 25002 10 0

# send an init to the watcher so he propagates
./bin/controller 24000 18 1

# when all nodes reached the termination time, this is how you end them
./bin/controller 25001 1 1

# and end the watcher
./bin/controller 25000 1 1
